///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 10.0
///////////////////////////////////////////////////////////////////////////////



#include "HalconCpp.h"



using namespace Halcon;

// Procedure declarations 
// Chapter: Develop
// Short Description: Open a new graphics window that preserves the aspect ratio of the given image.
extern void dev_open_window_fit_image (Halcon::Hobject Image, Halcon::HTuple Row, 
    Halcon::HTuple Column, Halcon::HTuple WidthLimit, Halcon::HTuple HeightLimit, 
    Halcon::HTuple *WindowHandle);

// Procedures 
#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{
  using namespace Halcon;

  // Local iconic variables 
  Hobject  Image, Regions, ConnectedRegions1, Contours3;
  Hobject  SelectedContours, Region, ImageReduced, Circle;
  Hobject  Region1, RegionComplement, Lines, SelectedContours1;
  Hobject  ContCircle, result, ObjectSelected1, RegionLines;
  Hobject  RegionDilation, Contours;


  // Local control variables 
  HTuple  WindowHandle, Area, Row1, Column1, PointOrder1;
  HTuple  AbsoluteHisto, RelativeHisto, MinThresh, MaxThresh;
  HTuple  Mean, Deviation, Row, Column, Radius, StartPhi;
  HTuple  EndPhi, PointOrder, Area1, Row2, Column2, PointOrder2;
  HTuple  line, Length1, Index, Abs, Abs1, Length, Index1;
  HTuple  RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist;
  HTuple  Area2, Row3, Column3, PointOrder3;

  ÂÆö‰Ωç
  read_image(&Image, "D:/halcon_learn/»±œ›/∑¥√Ê/6.png");
  dev_open_window_fit_image(Image, 0, 0, -1, -1, &WindowHandle);
  auto_threshold(Image, &Regions, 2);
  connection(Regions, &ConnectedRegions1);
  gen_contour_region_xld(ConnectedRegions1, &Contours3, "border");
  select_contours_xld(Contours3, &SelectedContours, "contour_length", 900, 1000, 
      -0.5, 0.5);
  gen_region_contour_xld(SelectedContours, &Region, "filled");
  reduce_domain(Image, Region, &ImageReduced);
  area_center_xld(SelectedContours, &Area, &Row1, &Column1, &PointOrder1);
  gen_circle_contour_xld(&Circle, Row1, Column1, 60, 0, 6.28318, "positive", 1);
  gen_region_contour_xld(Circle, &Region1, "filled");
  complement(Region1, &RegionComplement);
  reduce_domain(ImageReduced, RegionComplement, &ImageReduced);



  ÁôΩÁ∫øÊ£ÄÊµãÁÆóÊ≥ï
  gray_histo(ImageReduced, ImageReduced, &AbsoluteHisto, &RelativeHisto);
  histo_to_thresh(RelativeHisto, 1, &MinThresh, &MaxThresh);
  intensity(ImageReduced, ImageReduced, &Mean, &Deviation);
  threshold(ImageReduced, &Region, 24, 30);
  lines_gauss(ImageReduced, &Lines, 1, 1, 3, "light", "true", "bar-shaped", "true");
  select_contours_xld(Lines, &SelectedContours1, "contour_length", 30, 75, -0.5, 
      0.5);
  fit_circle_contour_xld(SelectedContours1, "algebraic", -1, 0, 0, 3, 2, &Row, &Column, 
      &Radius, &StartPhi, &EndPhi, &PointOrder);
  gen_circle_contour_xld(&ContCircle, Row, Column, Radius, 0, 6.28318, "positive", 
      1);

  area_center_xld(ContCircle, &Area1, &Row2, &Column2, &PointOrder2);
  line = HTuple();
  tuple_length(Row2, &Length1);
  for (Index=0; Index<=Length1-1; Index+=1)
  {
    tuple_abs(HTuple(Row2[Index])-Row1, &Abs);
    tuple_abs(HTuple(Column2[Index])-Column1, &Abs1);
    if (0 != (HTuple(Abs>30).Or(Abs1>30)))
    {
      tuple_concat(Index, line, &line);

    }
  }
  if (HDevWindowStack::IsOpen())
    set_draw(HDevWindowStack::GetActive(),"margin");
  tuple_length(line, &Length);
  gen_empty_obj(&result);
  ÊòæÁ§∫ÁÆóÊ≥ï
  for (Index1=0; Index1<=Length-1; Index1+=1)
  {
    select_obj(SelectedContours1, &ObjectSelected1, HTuple(line[Index1])+1);
    fit_line_contour_xld(ObjectSelected1, "tukey", -1, 0, 5, 2, &RowBegin, &ColBegin, 
        &RowEnd, &ColEnd, &Nr, &Nc, &Dist);
    gen_region_line(&RegionLines, RowBegin, ColBegin, RowEnd, ColEnd);
    dilation_circle(RegionLines, &RegionDilation, 3.5);
    gen_contour_region_xld(RegionDilation, &Contours, "border");
    area_center_xld(Contours, &Area2, &Row3, &Column3, &PointOrder3);
    concat_obj(Contours, result, &result);
  }

  if (HDevWindowStack::IsOpen())
    clear_window(HDevWindowStack::GetActive());
  if (HDevWindowStack::IsOpen())
    disp_obj(Image, HDevWindowStack::GetActive());
  if (HDevWindowStack::IsOpen())
    disp_obj(result, HDevWindowStack::GetActive());

  set_font(WindowHandle, "-Courier New-30-*-*-*-*-1-");
  write_string(WindowHandle, "NG");

  write_string(WindowHandle, Area2);





}


#ifndef NO_EXPORT_APP_MAIN
int main(int argc, char *argv[])
{
  using namespace Halcon;
  // Default settings used in HDevelop (can be omitted) 
  set_system("do_low_error","false");
  action();
  return 0;
}
#endif


#endif


