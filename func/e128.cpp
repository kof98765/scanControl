///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 10.0
///////////////////////////////////////////////////////////////////////////////



#include "HalconCpp.h"



using namespace Halcon;

// Procedure declarations 
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'.
void dev_update_off ();

// Procedures 
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'.
void dev_update_off ()
{
  using namespace Halcon;
  //This procedure sets different update settings to 'off'.
  //This is useful to get the best performance and reduce overhead.
  //
  // dev_update_pc(...); only in hdevelop
  // dev_update_var(...); only in hdevelop
  // dev_update_window(...); only in hdevelop
  return;
}

#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{
  using namespace Halcon;

  // Local iconic variables 
  Hobject  ImageA, Region, RegionFillUp, ConnectedRegions;
  Hobject  RegionErosion, RegionDilation, Image, ImageEmphasize;
  Hobject  ImageIlluminate, ImageMean, ImageReduced, RegionDynThresh_D;
  Hobject  SelectedRegions, ObjectSelected1, Rectangle, Circle;


  // Local control variables 
  HTuple  ImgPath, AcqHandle, j, Number_Point, i;
  HTuple  Mean2, Deviation2, Row1, Column1, Row21, Column21;
  HTuple  Mean3, Deviation3, Dev_Mean, Row, Column, Radius;


  // dev_update_off(...); only in hdevelop

  ImgPath = "./test/";
  open_framegrabber("File", 1, 1, 0, 0, 0, 0, "default", -1, "default", -1, "false", 
      ImgPath, "", 1, 2, &AcqHandle);

  for (j=2; j<=119; j+=1)
  {

    grab_image(&ImageA, AcqHandle);

    if (HDevWindowStack::IsOpen())
      set_colored(HDevWindowStack::GetActive(),12);
    if (HDevWindowStack::IsOpen())
      set_draw(HDevWindowStack::GetActive(),"fill");

    fast_threshold(ImageA, &Region, 100, 255, 0);
    fill_up_shape(Region, &RegionFillUp, "area", 1, 1200);
    connection(RegionFillUp, &ConnectedRegions);
    erosion_circle(ConnectedRegions, &RegionErosion, 5.5);
    connection(RegionErosion, &ConnectedRegions);
    select_shape(ConnectedRegions, &RegionDilation, "area", "and", 2000000, 45700000);

    if (HDevWindowStack::IsOpen())
      disp_obj(ImageA, HDevWindowStack::GetActive());
    //emphasize (Image, ImageEmphasize, 120, 120, 0.8)
    //illuminate (Image, ImageIlluminate, 80, 80, 0.5)
    //mean_image (Image, ImageMean, 2, 2)

    //*** µã *****
    mean_image(ImageA, &ImageMean, 7, 7);
    reduce_domain(ImageA, RegionDilation, &ImageReduced);
    dyn_threshold(ImageReduced, ImageMean, &RegionDynThresh_D, 8, "dark");
    connection(RegionDynThresh_D, &ConnectedRegions);
    select_shape(ConnectedRegions, &SelectedRegions, ((HTuple("area").Append("width")).Append("height")), 
        "and", ((HTuple(8).Append(2)).Append(2)), ((HTuple(250).Append(20)).Append(20)));
    count_obj(SelectedRegions, &Number_Point);

    if (HDevWindowStack::IsOpen())
      disp_obj(ImageA, HDevWindowStack::GetActive());
    for (i=1; i<=Number_Point; i+=1)
    {
      select_obj(SelectedRegions, &ObjectSelected1, i);
      intensity(ObjectSelected1, ImageA, &Mean2, &Deviation2);

      smallest_rectangle1(ObjectSelected1, &Row1, &Column1, &Row21, &Column21);
      gen_rectangle1(&Rectangle, Row1-2, Column1-2, Row21+2, Column21+2);
      intensity(Rectangle, ImageA, &Mean3, &Deviation3);
      Dev_Mean = Mean3-Mean2;

      if (0 != (HTuple(Deviation2>7).And(Dev_Mean>15)))
      {
        if (HDevWindowStack::IsOpen())
          disp_obj(ObjectSelected1, HDevWindowStack::GetActive());
        smallest_circle(ObjectSelected1, &Row, &Column, &Radius);

        if (HDevWindowStack::IsOpen())
          set_color(HDevWindowStack::GetActive(),"blue");
        if (HDevWindowStack::IsOpen())
          set_draw(HDevWindowStack::GetActive(),"margin");
        gen_circle(&Circle, Row, Column, Radius+8);
        if (HDevWindowStack::IsOpen())
          disp_obj(Circle, HDevWindowStack::GetActive());

      }
    }
    // stop(); only in hdevelop
    //dump_window (3600, 'bmp', ImgPath+'dump_amp_fushi'+'.bmp')

  }

  close_framegrabber(AcqHandle);





}


#ifndef NO_EXPORT_APP_MAIN
int main(int argc, char *argv[])
{
  using namespace Halcon;
  // Default settings used in HDevelop (can be omitted) 
  set_system("do_low_error","false");
  action();
  return 0;
}
#endif


#endif


