///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 10.0
///////////////////////////////////////////////////////////////////////////////



#include "HalconCpp.h"



using namespace Halcon;


#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{
  using namespace Halcon;

  // Local iconic variables 
  Hobject  Image, Imagetemp, RGBImage, Region, Image11;
  Hobject  Image2, Image3, Image1, Regions;


  // Local control variables 
  HTuple  MatID, Rows, Cols, Values, MultValues;
  HTuple  Min, Max, Row, Column, Width, Height, Width1, Height1;
  HTuple  Min1, Max1, Range, Indices, GrayValue, step, RGBValue;
  HTuple  d, i, j, Grayval, Rows1, Columns;

  read_matrix("D:/qt/first/build/data/Z.mtx", &MatID);


  get_size_matrix(MatID, &Rows, &Cols);
  get_full_matrix(MatID, &Values);
  tuple_mult(Values, 10, &MultValues);
  tuple_min(Values, &Min);
  tuple_max(Values, &Max);

  gen_image_const(&Image, "real", Cols, Rows);
  get_region_points(Image, &Row, &Column);
  set_grayval(Image, Row, Column, Values);
  get_image_size(Image, &Width, &Height);

  gen_image_const(&Imagetemp, "byte", Width, Height);
  get_image_size(Imagetemp, &Width1, &Height1);
  cfa_to_rgb(Imagetemp, &RGBImage, "bayer_gb", "bilinear");
  threshold(Image, &Region, 1, 255);
  min_max_gray(Region, Image, 0, &Min1, &Max1, &Range);
  decompose3(RGBImage, &Image11, &Image2, &Image3);
  tuple_find(Values, 0.0, &Indices);
  GrayValue = Min1;

  step = Range/6;
  RGBValue.Reset();
  RGBValue.Append(128-((GrayValue*128)/step));
  RGBValue.Append(0);
  RGBValue.Append(255);
  d = (Values-Min1)/step;
  for (i=0; i<=Height-1; i+=1)
  {
    for (j=0; j<=Width-1; j+=1)
    {
      get_grayval(Image, i, j, &Grayval);

      set_grayval(Image11, i, j, 128);
      set_grayval(Image2, i, j, 128);
      set_grayval(Image3, i, j, 255);
    }
  }
  get_grayval(Image, Row, Column, &Grayval);
  gen_image_const(&Image1, "real", Cols, Rows);
  get_region_points(Image1, &Rows1, &Columns);
  set_grayval(Image1, Rows1, Columns, d);
  auto_threshold(Image1, &Regions, 1);



}


#ifndef NO_EXPORT_APP_MAIN
int main(int argc, char *argv[])
{
  using namespace Halcon;
  // Default settings used in HDevelop (can be omitted) 
  set_system("do_low_error","false");
  action();
  return 0;
}
#endif


#endif


