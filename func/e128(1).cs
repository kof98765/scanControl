//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !NO_EXPORT_APP_MAIN
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("do_low_error", "false");
    action();
  }
#endif

  public void HDevelopStop()
  {
  }

  // Procedures 
  // Chapter: Develop
  // Short Description: Switch dev_update_pc, dev_update_var and dev_update_window to 'off'.
  public void dev_update_off ()
  {
    // Initialize local and output iconic variables 

    //This procedure sets different update settings to 'off'.
    //This is useful to get the best performance and reduce overhead.
    //
    // dev_update_pc(...); only in hdevelop
    // dev_update_var(...); only in hdevelop
    // dev_update_window(...); only in hdevelop

    return;
  }

  // Main procedure 
  private void action()
  {

    // Local iconic variables 

    HObject ho_ImageA=null, ho_Region=null, ho_RegionFillUp=null;
    HObject ho_ConnectedRegions=null, ho_RegionErosion=null;
    HObject ho_RegionDilation=null, ho_ImageMean=null, ho_ImageReduced=null;
    HObject ho_RegionDynThresh_D=null, ho_SelectedRegions=null;
    HObject ho_ObjectSelected1=null, ho_Circle=null, ho_Rectangle=null;


    // Local control variables 

    HTuple hv_ImgPath, hv_AcqHandle, hv_j, hv_Number_Point=new HTuple();
    HTuple hv_i=new HTuple(), hv_Mean2=new HTuple(), hv_Deviation2=new HTuple();
    HTuple hv_Row=new HTuple(), hv_Column=new HTuple(), hv_Radius=new HTuple();
    HTuple hv_Row1=new HTuple(), hv_Column1=new HTuple(), hv_Row21=new HTuple();
    HTuple hv_Column21=new HTuple(), hv_Mean3=new HTuple();
    HTuple hv_Deviation3=new HTuple(), hv_Dev_Mean=new HTuple();

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ImageA);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionErosion);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    HOperatorSet.GenEmptyObj(out ho_ImageMean);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_RegionDynThresh_D);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected1);
    HOperatorSet.GenEmptyObj(out ho_Circle);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);


    // dev_update_off(...); only in hdevelop

    hv_ImgPath = "./img/";
    HOperatorSet.OpenFramegrabber("File", 1, 1, 0, 0, 0, 0, "default", -1, "default", 
        -1, "false", hv_ImgPath, "", 1, 2, out hv_AcqHandle);

    for (hv_j=2; (int)hv_j<=119; hv_j = (int)hv_j + 1)
    {

      ho_ImageA.Dispose();
      HOperatorSet.GrabImage(out ho_ImageA, hv_AcqHandle);

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetColored(HDevWindowStack.GetActive(), 12);
      }
      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "fill");
      }

      ho_Region.Dispose();
      HOperatorSet.FastThreshold(ho_ImageA, out ho_Region, 100, 255, 0);
      ho_RegionFillUp.Dispose();
      HOperatorSet.FillUpShape(ho_Region, out ho_RegionFillUp, "area", 1, 1200);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionFillUp, out ho_ConnectedRegions);
      ho_RegionErosion.Dispose();
      HOperatorSet.ErosionCircle(ho_ConnectedRegions, out ho_RegionErosion, 5.5);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionErosion, out ho_ConnectedRegions);
      ho_RegionDilation.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_RegionDilation, "area", 
          "and", 2000000, 4500000);

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_ImageA, HDevWindowStack.GetActive());
      }
      //emphasize (Image, ImageEmphasize, 120, 120, 0.8)
      //illuminate (Image, ImageIlluminate, 80, 80, 0.5)
      //mean_image (Image, ImageMean, 2, 2)

      //*****************************************
      //******** µã¼ì²â **********************
      //mean_image (ImageA, ImageMean, 17, 17)
      //reduce_domain (ImageMean, RegionDilation, ImageReducedM)
      //reduce_domain (ImageA, RegionDilation, ImageReduced)

      //*** ºÚµã *****
      //dyn_threshold (ImageReduced, ImageReducedM, RegionDynThresh_D, 18, 'dark')
      //connection (RegionDynThresh_D, ConnectedRegions)
      //select_shape (ConnectedRegions, SelectedRegions, ['area'], 'and', [7], [300])
      //count_obj (SelectedRegions, Number_Point)

      if (HDevWindowStack.IsOpen())
      {
        //dev_display (ImageA)
      }
      //for i := 1 to Number_Point by 1
        //select_obj (SelectedRegions, ObjectSelected1, i)
        if (HDevWindowStack.IsOpen())
        {
          //dev_display (ObjectSelected1)
        }
        //intensity (ObjectSelected1, ImageA, Mean2, Deviation2)

        //shape_trans (ObjectSelected1, RegionTrans, 'inner_circle')
        //smallest_circle (RegionTrans, Row, Column, Radius_inner)
        //shape_trans (ObjectSelected1, RegionTrans, 'outer_circle')
        //smallest_circle (RegionTrans, Row, Column, Radius_outer)
        //Dev_Radius := Radius_outer - Radius_inner

        //if (Dev_Radius<2.9)
          if (HDevWindowStack.IsOpen())
          {
            //dev_set_draw ('fill')
          }
          if (HDevWindowStack.IsOpen())
          {
            //dev_set_color ('red')
          }
          if (HDevWindowStack.IsOpen())
          {
            //dev_display (ObjectSelected1)
          }
          if (HDevWindowStack.IsOpen())
          {
            //dev_set_draw ('margin')
          }
          if (HDevWindowStack.IsOpen())
          {
            //dev_set_color ('blue')
          }

          //smallest_circle (ObjectSelected1, Row, Column, Radius)

          if (HDevWindowStack.IsOpen())
          {
            //dev_set_color ('blue')
          }
          if (HDevWindowStack.IsOpen())
          {
            //dev_set_draw ('margin')
          }
          //gen_circle (Circle, Row, Column, Radius+8)
          if (HDevWindowStack.IsOpen())
          {
            //dev_display (Circle)
          }
        //endif
      //endfor
      //stop ()
      //dump_window (3600, 'bmp', ImgPath+'dump_amp_point'+'.bmp')

      //*** µã *****
      ho_ImageMean.Dispose();
      HOperatorSet.MeanImage(ho_ImageA, out ho_ImageMean, 9, 9);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_ImageA, ho_RegionDilation, out ho_ImageReduced
          );
      ho_RegionDynThresh_D.Dispose();
      HOperatorSet.DynThreshold(ho_ImageReduced, ho_ImageMean, out ho_RegionDynThresh_D, 
          8, "dark");
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionDynThresh_D, out ho_ConnectedRegions);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, ((new HTuple("area")).TupleConcat(
          "width")).TupleConcat("height"), "and", ((new HTuple(3)).TupleConcat(2)).TupleConcat(
          2), ((new HTuple(250)).TupleConcat(20)).TupleConcat(20));
      HOperatorSet.CountObj(ho_SelectedRegions, out hv_Number_Point);

      if (HDevWindowStack.IsOpen())
      {
        HOperatorSet.DispObj(ho_ImageA, HDevWindowStack.GetActive());
      }
      for (hv_i=1; hv_i.Continue(hv_Number_Point, 1); hv_i = hv_i.TupleAdd(1))
      {
        ho_ObjectSelected1.Dispose();
        HOperatorSet.SelectObj(ho_SelectedRegions, out ho_ObjectSelected1, hv_i);
        HOperatorSet.Intensity(ho_ObjectSelected1, ho_ImageA, out hv_Mean2, out hv_Deviation2);

        HOperatorSet.SmallestRectangle1(ho_ObjectSelected1, out hv_Row1, out hv_Column1, 
            out hv_Row21, out hv_Column21);
        ho_Rectangle.Dispose();
        HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row1-2, hv_Column1-2, hv_Row21+2, 
            hv_Column21+2);
        HOperatorSet.Intensity(ho_Rectangle, ho_ImageA, out hv_Mean3, out hv_Deviation3);
        hv_Dev_Mean = hv_Mean3-hv_Mean2;

        if ((int)((new HTuple(hv_Deviation2.TupleGreater(5))).TupleAnd(new HTuple(hv_Dev_Mean.TupleGreater(
            15)))) != 0)
        {
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.DispObj(ho_ObjectSelected1, HDevWindowStack.GetActive());
          }
          HOperatorSet.SmallestCircle(ho_ObjectSelected1, out hv_Row, out hv_Column, 
              out hv_Radius);

          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.SetColor(HDevWindowStack.GetActive(), "blue");
          }
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.SetDraw(HDevWindowStack.GetActive(), "margin");
          }
          ho_Circle.Dispose();
          HOperatorSet.GenCircle(out ho_Circle, hv_Row, hv_Column, hv_Radius+8);
          if (HDevWindowStack.IsOpen())
          {
            HOperatorSet.DispObj(ho_Circle, HDevWindowStack.GetActive());
          }

        }
      }
      HDevelopStop();
      //dump_window (3600, 'bmp', ImgPath+'dump_amp_fushi'+'.bmp')

    }

    HOperatorSet.CloseFramegrabber(hv_AcqHandle);





    ho_ImageA.Dispose();
    ho_Region.Dispose();
    ho_RegionFillUp.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_RegionErosion.Dispose();
    ho_RegionDilation.Dispose();
    ho_ImageMean.Dispose();
    ho_ImageReduced.Dispose();
    ho_RegionDynThresh_D.Dispose();
    ho_SelectedRegions.Dispose();
    ho_ObjectSelected1.Dispose();
    ho_Circle.Dispose();
    ho_Rectangle.Dispose();

  }


}
#if !NO_EXPORT_APP_MAIN
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

