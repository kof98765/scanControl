///////////////////////////////////////////////////////////////////////////////
//  File generated by HDevelop for HALCON/C++ Version 10.0
///////////////////////////////////////////////////////////////////////////////



#include "HalconCpp.h"



using namespace Halcon;


#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{
  using namespace Halcon;

  // Local iconic variables 
  Hobject  Image, ImageZoomed, RegionChecker, MaskGreen;
  Hobject  RegionGrid, MaskBlue, MaskRed, ImageRed, ImageGreen;
  Hobject  ImageBlue, ImageMaskRed, ImageMaskGreen, ImageMaskBlue;
  Hobject  ImageCFA, RGBImage, ImageSub;


  // Local control variables 
  HTuple  Width, Height, WindowHandle;

  // dev_update_off(...); only in hdevelop
  read_image(&Image, "patras");
  get_image_size(Image, &Width, &Height);
  if (HDevWindowStack::IsOpen())
    close_window(HDevWindowStack::Pop());
  set_window_attr("background_color","black");
  open_window(0,0,Width,Height,0,"","",&WindowHandle);
  HDevWindowStack::Push(WindowHandle);
  set_display_font(WindowHandle, 16, "mono", "true", "false");
  zoom_image_factor(Image, &ImageZoomed, 0.5, 0.5, "constant");
  dev_resize_window_fit_image(ImageZoomed, 0, 0, Width/2, Height/2);
  disp_message(WindowHandle, "Original image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  //Simulate a Bayer image by sampling the channels of the original image.
  gen_checker_region(&RegionChecker, Width, Height+1, 1, 1);
  move_region(RegionChecker, &MaskGreen, -1, 0);
  gen_grid_region(&RegionGrid, 2, 2, "points", Width, Height);
  move_region(RegionGrid, &MaskBlue, 0, 1);
  move_region(RegionGrid, &MaskRed, 1, 0);
  decompose3(Image, &ImageRed, &ImageGreen, &ImageBlue);
  reduce_domain(ImageRed, MaskRed, &ImageMaskRed);
  reduce_domain(ImageGreen, MaskGreen, &ImageMaskGreen);
  reduce_domain(ImageBlue, MaskBlue, &ImageMaskBlue);
  gen_image_const(&ImageCFA, "byte", Width, Height);
  paint_gray(ImageMaskRed, ImageCFA, &ImageCFA);
  paint_gray(ImageMaskGreen, ImageCFA, &ImageCFA);
  paint_gray(ImageMaskBlue, ImageCFA, &ImageCFA);
  if (HDevWindowStack::IsOpen())
    disp_obj(ImageCFA, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "Bayer image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  //Reconstruct an RGB image from the Bayer image.
  cfa_to_rgb(ImageCFA, &RGBImage, "bayer_gb", "bilinear");
  if (HDevWindowStack::IsOpen())
    disp_obj(RGBImage, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "RGB image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  //Calculate the differences between the original and the reconstructed image.
  sub_image(Image, RGBImage, &ImageSub, 1, 128);
  if (HDevWindowStack::IsOpen())
    disp_obj(ImageSub, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "Difference image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  if (HDevWindowStack::IsOpen())
    set_part(HDevWindowStack::GetActive(),122, 79, 214, 218);
  if (HDevWindowStack::IsOpen())
    disp_obj(Image, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "Original image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  if (HDevWindowStack::IsOpen())
    disp_obj(ImageCFA, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "Bayer image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  if (HDevWindowStack::IsOpen())
    disp_obj(RGBImage, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "RGB image", "window", 12, 12, "black", "true");
  disp_continue_message(WindowHandle, "black", "true");
  // stop(); only in hdevelop
  if (HDevWindowStack::IsOpen())
    disp_obj(ImageSub, HDevWindowStack::GetActive());
  disp_message(WindowHandle, "Difference image", "window", 12, 12, "black", "true");
}


#ifndef NO_EXPORT_APP_MAIN
int main(int argc, char *argv[])
{
  using namespace Halcon;
  // Default settings used in HDevelop (can be omitted) 
  set_system("do_low_error","false");
  action();
  return 0;
}
#endif


#endif


